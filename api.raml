#%RAML 0.8
---
title: "JUG - RAML"
version: v1
baseUri: https://localhost:8080/raml/resources
protocols: [ HTTPS ]
mediaType: application/json
documentation:
    - title: Home
      content: |
        JUG - Contract-first with RAML
schemas:
    - author: |
        {   "$schema": "http://json-schema.org/draft-03/schema",
            "type": "object",
            "description": "A single author",
            "properties": {
                "id": { "type": "integer", "required": true},
                "name":  { "type": "string", "required": true },
                "books": {
                    "type": "array",
                    "items": {
                        "$ref":"book"
                    }
                }
            }
        }
    - book: |
        {   "$schema": "http://json-schema.org/draft-03/schema",
            "type": "object",
            "description": "A single book",
            "properties": {
                "id": { "type": "integer", "required": true},
                "name":  { "type": "string", "required": true },
                "isbn":  { "type": "string", "required": true },
                "author_id" : { "type": "integer" }
            }
        }
    - authors: |
        {   "$schema": "http://json-schema.org/draft-03/schema",
            "type": "object",
            "description": "a collection of authors",
            "properties": {
                "size":  { "type": "integer", "required": true },
                "authors":  {
                    "type": "array",
                    "items": { "$ref": "author" }
                }
              }
        }
    - books: |
        {   "$schema": "http://json-schema.org/draft-03/schema",
            "type": "object",
            "description": "a collection of books",
            "properties": {
                "size":  { "type": "integer", "required": true },
                "books":  {
                    "type": "array",
                    "items": { "$ref": "book" }
                }
              }
        }
/authors:
    displayName: AuthorsResource
    type: {
        collection: {
            schema: authors
        }
    }
    get:
        description: Get a list of all the authors in the system
        is: [searchable: {description: "with valid searchable fields: name", example: "[\"name\", \"Wheel of Time\"]"}]
    post:
        description: Add author
        responses:
            201:
                body:
                    application/json:
                        schema: author
    /id/{authorId}:
        type: { member:  { schema: author } }
        uriParameters:
            authorId:
                displayName: Author ID
                type: integer
        get:
            description: Retrieve a specific author
        post:
            description: Update an author
        delete:
            description: Delete an author
/books:
    displayName: BooksResource
    type: { collection:  { schema: books } }
    get:
        description: Get a list of all of the books in the system
    post:
        description: Create a book
    /id/{bookId}:
        type: { member:  { schema: book } }
        uriParameters:
            bookId:
                displayName: Book ID
                type: integer
        get:
            description: Get a book
resourceTypes:
    - collection:
        is: [ secured ]
        get:
            is: [ paged ]
            responses:
                200:
                    body:
                        application/json:
                            schema: <<schema>>
        post:
            body:
                application/json:
                    schema: <<schema>>
            responses:
                201:
                    body:
                        application/json:
                            schema: <<schema>>
    - member:
        is: [ secured ]
        get:
            responses:
                200:
                    body:
                        application/json:
                            schema: <<schema>>
        post:
            body:
                application/json:
                    schema: <<schema>>
            responses:
                200:
                    body:
                        application/json:
                            schema: <<schema>>
        delete:
            responses:
                200:
traits:
    - searchable:
        queryParameters:
            query:
                description: |
                    JSON array [{"field1","value1","operator1"},{"field2","value2","operator2"},...,{"fieldN","valueN","operatorN"}] <<description>>
                example: |
                    <<example>>
    - paged:
            displayName: paged
            queryParameters:
                start:
                    displayName: start
                    description: The first page to return
                    type: integer
                pages:
                    displayName: pages
                    description: The number of pages to return
                    type: integer
    - secured:
            displayName: secured
            headers:
                Authorization:
                    description: The auth token for this request
            responses:
                401:
                    description: Unauthorized
